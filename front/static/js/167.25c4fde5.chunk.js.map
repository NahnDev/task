{"version":3,"file":"static/js/167.25c4fde5.chunk.js","mappings":"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","sources":["components/Header/components/User/index.tsx","components/Header/index.tsx","components/DrawerCustom/index.tsx","features/Project/components/FormMember/Member/index.tsx","features/Project/components/FormMember/index.tsx","features/Project/components/FormRoles/InputName/index.tsx","features/Project/components/FormRoles/Roles/index.tsx","features/Project/components/FormRoles/SelectPermission/index.tsx","features/Project/components/FormRoles/index.tsx","features/Project/components/FormSetRole/Member/index.tsx","features/Project/components/FormSetRole/SelectPermission/index.tsx","features/Project/components/FormSetRole/index.tsx","custom-fields/DateField/index.tsx","custom-fields/SelectField/index.tsx","features/Project/components/FormTask/index.tsx","features/Project/components/TaskDetail/DateTask/index.tsx","features/Project/components/TaskDetail/Header/index.tsx","features/Project/components/TaskDetail/SelectTask/index.tsx","features/Project/components/FormSubTask/index.tsx","features/Project/components/TaskDetail/SubTask/index.tsx","features/Project/components/TaskDetail/TextAreaTask/index.tsx","features/Project/components/TaskDetail/index.tsx","features/Project/components/Tasks/index.tsx","features/Project/index.tsx"],"sourcesContent":["import { Avatar, Col, Dropdown, Menu, Row } from 'antd'\nimport { User } from '../../../../types/global'\nimport { PlusOutlined } from '@ant-design/icons'\nimport { randomColorAvatar } from '../../../../functions/global'\n\ntype IProps = {\n    className: string\n    user: User\n\n    menuUser: any\n}\n\nfunction UserDetail(props: IProps) {\n    const name = props.user.name\n\n    return (\n        <Row align=\"middle\">\n            <Col className={`${props.className}--name`}>\n                <span>{props.user.name}</span>\n            </Col>\n            <Dropdown\n                overlay={props.menuUser}\n                placement=\"bottomRight\"\n                arrow\n                className={`${props.className}--avatar`}\n            >\n                <Avatar style={{ backgroundColor: randomColorAvatar(props.user._id) }}>\n                    {name?.slice(name?.indexOf(' ') + 1, name?.indexOf(' ') + 2)}\n                </Avatar>\n            </Dropdown>\n        </Row>\n    )\n}\n\nexport default UserDetail\n","import { Col, Dropdown, Input, Menu, Row } from 'antd'\nimport React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport userApi from '../../api/userApi'\nimport { setSignOut, setUser } from '../../app/userSlice'\nimport { classComponent } from '../../constants/className'\nimport { User } from '../../types/global'\nimport Search from '../Search'\nimport UserDetail from './components/User'\nimport { DownOutlined } from '@ant-design/icons'\n\nimport './Header.scss'\nimport { NavLink } from 'react-router-dom'\nimport { CONTENT_COMPONENT } from '../../constants/global'\n\ntype TProps = {\n    className: string\n    title?: string\n    dropdown?: any\n    actionDropdown?: Function\n    navigate?: Array<any>\n\n    changeNameProject?: Function\n}\n\nconst content = CONTENT_COMPONENT.header\nconst className = classComponent.header\n\nfunction Header(props: TProps) {\n    const user: User = useSelector((state: any) => state.user)\n    const dispatch = useDispatch()\n    const [title, setTitle] = useState<string>(props.dropdown)\n\n    const menuDropdown = (\n        <Menu\n            onClick={(value) => {\n                if (props.actionDropdown) props.actionDropdown(value.key)\n            }}\n        >\n            {content.menuDropdown.map((value) => {\n                return (\n                    <Menu.Item key={value.key}>\n                        <value.icon /> {value.text}\n                    </Menu.Item>\n                )\n            })}\n        </Menu>\n    )\n\n    const menuUser = (\n        <Menu onClick={(value) => handleUser(value.key)}>\n            {content.menuUser.map((value) => {\n                return (\n                    <Menu.Item key={value.key}>\n                        <value.icon /> {value.text}\n                    </Menu.Item>\n                )\n            })}\n        </Menu>\n    )\n\n    const getUser = async (_id: string) => {\n        try {\n            const response: any = await userApi.getUserDetail(_id)\n            dispatch(setUser(response))\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const handleUser = (value: any) => {\n        switch (value) {\n            case 'profile':\n                break\n            case 'logout':\n                dispatch(setSignOut({ isLogin: false, _id: '' }))\n                break\n            default:\n                break\n        }\n    }\n\n    useEffect(() => {\n        getUser(user._id)\n        setTitle(props.dropdown)\n    }, [user.name !== undefined, props.dropdown])\n\n    return (\n        <Row align=\"middle\" justify=\"space-between\" className={`${className} ${props.className}`}>\n            <Col>\n                <Row>\n                    {props.dropdown ? (\n                        <span className={`${className}__title`}>\n                            <Dropdown overlay={menuDropdown} placement=\"bottomLeft\" arrow>\n                                <button className={`${className}__title--icon`}>\n                                    <DownOutlined />\n                                </button>\n                            </Dropdown>\n\n                            <Input\n                                className={`${className}__title--input`}\n                                bordered={false}\n                                value={title}\n                                onChange={(e) => setTitle(e.target.value)}\n                                onBlur={() => {\n                                    props.changeNameProject &&\n                                        props.changeNameProject(title || props.dropdown)\n                                }}\n                            />\n                        </span>\n                    ) : (\n                        <span className={`${className}__title`}>{props.title}</span>\n                    )}\n                </Row>\n                {props.navigate && props.navigate.length && (\n                    <Row className={`${className}__navigate`}>\n                        {props.navigate.map((value, index) => {\n                            return (\n                                <Col key={`header-navigate-${index} `}>\n                                    <NavLink\n                                        to={value.path}\n                                        className={({ isActive }) =>\n                                            isActive\n                                                ? `${className}__navigate--link active`\n                                                : `${className}__navigate--link`\n                                        }\n                                    >\n                                        {value.text}\n                                    </NavLink>\n                                </Col>\n                            )\n                        })}\n                    </Row>\n                )}\n            </Col>\n            <Col>\n                <Row align=\"middle\">\n                    <Col className={`${className}__search`}>\n                        <Search onSearch={(value: any) => console.log(value)} />\n                    </Col>\n                    <Col>\n                        <UserDetail\n                            menuUser={menuUser}\n                            user={user}\n                            className={`${className}__detail`}\n                        />\n                    </Col>\n                </Row>\n            </Col>\n        </Row>\n    )\n}\n\nexport default Header\n","import { Drawer } from 'antd'\nimport { useEffect } from 'react'\n\nimport './DrawerCustom.scss'\n\ntype IProps = {\n    visible: boolean\n\n    closeModal: Function\n    title?: string\n\n    contentDrawer: any\n}\n\nfunction DrawerCustom(props: IProps) {\n    useEffect(() => {}, [props.visible])\n\n    return (\n        <Drawer\n            title={props.title || false}\n            placement=\"right\"\n            width={550}\n            onClose={() => props.closeModal()}\n            visible={props.visible}\n            getContainer={false}\n            closable={false}\n        >\n            {props.contentDrawer}\n        </Drawer>\n    )\n}\n\nexport default DrawerCustom\n","import { Avatar, Col, Row } from 'antd'\nimport { CONTENT_PROJECT } from '../../../../../constants/global'\nimport { randomColorAvatar } from '../../../../../functions/global'\nimport { User } from '../../../../../types/global'\n\ntype IProps = {\n    projectAuthor: string\n    value: User\n    type: 'add' | 'delete'\n    handleMember: Function\n\n    className: string\n}\n\nconst content = CONTENT_PROJECT.formMember\n\nfunction MemberItem(props: IProps) {\n    const { className, value, type, handleMember, projectAuthor } = props\n\n    return (\n        <Row align=\"middle\" className={`${className}-item`}>\n            <Col xs={6} className={`${className}-item--avatar`}>\n                <Avatar\n                    shape=\"square\"\n                    size={55}\n                    style={{\n                        backgroundColor: randomColorAvatar(value._id),\n                        borderRadius: 15,\n                    }}\n                >\n                    {value.name?.slice(0, 1)}\n                </Avatar>\n            </Col>\n\n            <Col xs={16} className={`${className}-item--desc`}>\n                <span>{value.name}</span>\n                <span>{value.email}</span>\n            </Col>\n\n            {projectAuthor !== value._id && (\n                <Col xs={2}>\n                    <button\n                        onClick={() => handleMember(value._id, type)}\n                        className={`${className}-btn`}\n                    >\n                        {type === 'add' ? <content.btnSubmit /> : <content.btnDelete />}\n                    </button>\n                </Col>\n            )}\n        </Row>\n    )\n}\n\nexport default MemberItem\n","import { Avatar, Col, Row } from 'antd'\nimport { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport projectsApi from '../../../../api/projectsApi'\nimport userApi from '../../../../api/userApi'\nimport { addMember, deleteMember } from '../../../../app/projectSlice'\nimport { addMemberToProject, deleteMemberToProject } from '../../../../app/projectsSlice'\nimport Search from '../../../../components/Search'\nimport { classProject } from '../../../../constants/className'\nimport { CONTENT_PROJECT } from '../../../../constants/global'\nimport { openNotificationWithIcon, randomColorAvatar } from '../../../../functions/global'\nimport { DataMembers } from '../../../../types/api'\nimport { Member, Project, User } from '../../../../types/global'\nimport MemberItem from './Member'\n\ntype IProps = {}\n\nconst content = CONTENT_PROJECT.formMember\nconst className = classProject.member\n\nfunction FormMember(props: IProps) {\n    const dispatch = useDispatch()\n    const project: Project = useSelector((state: any) => state.project)\n    const user: User = useSelector((state: any) => state.user)\n\n    const [userSearch, setUserSearch] = useState<Array<any>>()\n    const findUser = async (mail: string) => {\n        try {\n            const response: Array<User> = await userApi.getUser(mail)\n\n            if (response.length === 0) {\n                openNotificationWithIcon('warning', \"Can't find user!\", '')\n            } else {\n                let arr = []\n                for (const user of response) {\n                    let filter = project.members.filter((item) => item.user._id === user._id)\n                    arr.push({ ...user, visible: filter.length === 0 ? true : false })\n                }\n\n                setUserSearch(arr)\n            }\n        } catch (error: any) {\n            console.log(error)\n        }\n    }\n\n    const postMember = async (pid: string, data: DataMembers) => {\n        try {\n            const response: Member = await projectsApi.postMembers(pid, data)\n            dispatch(addMember(response))\n            dispatch(addMemberToProject({ _pid: pid, value: response }))\n            setUserSearch([])\n        } catch (error: any) {\n            console.log(error)\n        }\n    }\n\n    const deleteMemberAPI = async (pid: string, uid: string) => {\n        try {\n            const response = await projectsApi.deleteMembers(pid, uid)\n            dispatch(deleteMember(uid))\n            dispatch(deleteMemberToProject({ _pid: pid, value: uid }))\n        } catch (error: any) {\n            console.log(error)\n        }\n    }\n\n    const handleSearch = (value: string) => {\n        value && findUser(value)\n    }\n\n    const handleMember = (value: any, type: 'add' | 'delete') => {\n        if (type === 'delete') {\n            deleteMemberAPI(project._id, value)\n        } else {\n            const data: DataMembers = {\n                user: value,\n            }\n            postMember(project._id, data)\n        }\n    }\n\n    return (\n        <Row>\n            <Col xs={12} className={`${className}-search`}>\n                <Search onSearch={handleSearch} />\n                <Row>\n                    <Col xs={24} className={`${className}-list`}>\n                        {userSearch &&\n                            userSearch.length > 0 &&\n                            userSearch.map((value, index) => {\n                                if (user._id !== value._id && value.visible)\n                                    return (\n                                        <MemberItem\n                                            projectAuthor={project.author}\n                                            key={`member-project-${index}`}\n                                            className={`${className}`}\n                                            value={value}\n                                            type={'add'}\n                                            handleMember={handleMember}\n                                        />\n                                    )\n                            })}\n                    </Col>\n                </Row>\n            </Col>\n\n            <Col xs={12} className={`${className}-list`}>\n                {project.members.map((value, index) => {\n                    if (user._id !== value.user._id)\n                        return (\n                            <MemberItem\n                                projectAuthor={project.author}\n                                key={`member-project-${index}`}\n                                className={`${className}`}\n                                value={value.user}\n                                type={'delete'}\n                                handleMember={handleMember}\n                            />\n                        )\n                })}\n            </Col>\n        </Row>\n    )\n}\n\nexport default FormMember\n","import { Input, Row } from 'antd'\n\ntype IProps = {\n    className?: string\n    placeholder?: string\n    name?: string\n    label?: string\n    value: any\n\n    onChange: Function\n}\n\nfunction InputName(props: IProps) {\n    return (\n        <Row justify=\"center\" align=\"middle\" className={`${props.className}`}>\n            {props.label && (\n                <label htmlFor={props.name} className={`${props.className}--label`}>\n                    {props.label}\n                </label>\n            )}\n            <Input\n                name={props.name}\n                className={`${props.className}--input`}\n                placeholder={props.placeholder}\n                bordered={false}\n                value={props.value.name}\n                onChange={(e) => props.onChange(e.target.value)}\n            />\n        </Row>\n    )\n}\n\nexport default InputName\n","import { Col, Row, Tag } from 'antd'\nimport { Role } from '../../../../../types/global'\n\ntype IProps = {\n    className?: string\n    icon: any\n\n    roles: Array<Role>\n    handleDelete: Function\n}\n\nfunction Roles(props: IProps) {\n    return (\n        <>\n            <Row className={`${props.className}--title`}>\n                <span>Roles</span>\n            </Row>\n            <Row className={`${props.className}`}>\n                <Col xs={24}>\n                    {props.roles.map((value, index) => {\n                        if (!value.default)\n                            return (\n                                <Row\n                                    key={`role-${index}`}\n                                    justify=\"space-between\"\n                                    align=\"middle\"\n                                    className={`${props.className}--item`}\n                                >\n                                    <div className={`${props.className}--name`}>\n                                        <span>{value.name}</span>\n                                        <div>\n                                            {value.permission.length === 8 ? (\n                                                <Tag key={`tag-all`} color=\"lime\">\n                                                    ALL\n                                                </Tag>\n                                            ) : (\n                                                value.permission.map((value, index) => {\n                                                    return (\n                                                        <Tag\n                                                            key={`tag-${index}`}\n                                                            color=\"lime\"\n                                                            style={{\n                                                                marginRight: 3,\n                                                                marginBottom: 3,\n                                                                fontSize: '0.6rem',\n                                                            }}\n                                                        >\n                                                            {value}\n                                                        </Tag>\n                                                    )\n                                                })\n                                            )}\n                                        </div>\n                                    </div>\n                                    {!value.default && (\n                                        <button\n                                            className={`${props.className}--btn`}\n                                            onClick={() => props.handleDelete(value)}\n                                        >\n                                            <props.icon />\n                                        </button>\n                                    )}\n                                </Row>\n                            )\n                    })}\n                </Col>\n            </Row>\n        </>\n    )\n}\n\nexport default Roles\n","import { Row, Select, Tag } from 'antd'\nimport { useState } from 'react'\nimport { randomColorAvatar } from '../../../../../functions/global'\n\ntype SelectPermissionProps = {\n    className?: string\n    label?: string\n    value: any\n\n    options: Array<{ _id: string; name: string }>\n    onChange: Function\n}\n\nconst { Option } = Select\n\nfunction SelectPermission(props: SelectPermissionProps) {\n    function tagRender(props: any) {\n        const { label, value, closable, onClose } = props\n\n        return (\n            <Tag\n                color={randomColorAvatar(value)}\n                closable={closable}\n                onClose={onClose}\n                style={{ marginRight: 3 }}\n            >\n                {label}\n            </Tag>\n        )\n    }\n\n    return (\n        <Row align=\"middle\" className={`${props.className}`}>\n            {props.label && <label className={`${props.className}--label`}>{props.label}</label>}\n            <Select\n                mode={'tags'}\n                bordered={false}\n                className={`${props.className}--input`}\n                value={props.value.permission}\n                onChange={(val) => props.onChange(val)}\n                tagRender={tagRender}\n            >\n                {props.options.map((value: any) => {\n                    return (\n                        <Option key={value._id} value={value._id}>\n                            {value.name}\n                        </Option>\n                    )\n                })}\n            </Select>\n        </Row>\n    )\n}\n\nexport default SelectPermission\n","import { Col, Row } from 'antd'\nimport { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport projectsApi from '../../../../api/projectsApi'\nimport { classProject } from '../../../../constants/className'\nimport { CONTENT_PROJECT } from '../../../../constants/global'\nimport { openNotificationWithIcon } from '../../../../functions/global'\nimport { Role } from '../../../../types/global'\nimport InputName from './InputName'\nimport Roles from './Roles'\nimport SelectPermission from './SelectPermission'\n\ntype IProps = {}\n\nconst content = CONTENT_PROJECT.formRoles\nconst className = classProject.roles\n\nfunction FormRoles(props: IProps) {\n    const params: any = useParams()\n\n    const [dataAddRole, setDataAddRole] = useState<any>({ name: '', permission: [] })\n    const [roles, setRoles] = useState<Array<Role>>([])\n\n    const getRoles = async (id: string) => {\n        try {\n            const response = await projectsApi.getRoles(id)\n            setRoles(response)\n        } catch (error: any) {\n            console.log(error)\n        }\n    }\n\n    const postRoles = async (id: string, data: any) => {\n        try {\n            const response = await projectsApi.postRoles(id, data)\n            console.log(response)\n\n            if (response) {\n                getRoles(id)\n                setDataAddRole({ name: '', permission: [] })\n                openNotificationWithIcon('success', 'Add role successfully!', '')\n            }\n        } catch (error: any) {\n            console.log(error)\n        }\n    }\n\n    const deleteRoles = async (pid: string, id: string) => {\n        try {\n            const response = await projectsApi.deleteRoles(pid, id)\n            getRoles(pid)\n        } catch (error: any) {\n            console.log(error)\n        }\n    }\n\n    const handleSubmit = () => postRoles(params.id, dataAddRole)\n    const handleDelete = (value: Role) => {\n        deleteRoles(value.project || '', value._id || '')\n    }\n\n    useEffect(() => {\n        getRoles(params.id)\n    }, [params])\n\n    return (\n        <Row>\n            <Col xs={24}>\n                <InputName\n                    className={`${className}-field`}\n                    name={'name'}\n                    label={'Name Role *'}\n                    value={dataAddRole}\n                    onChange={(value: string) => setDataAddRole({ ...dataAddRole, name: value })}\n                />\n                <SelectPermission\n                    options={content.optionsPermission}\n                    className={`${className}-field`}\n                    label={'Permission'}\n                    value={dataAddRole}\n                    onChange={(value: any) => setDataAddRole({ ...dataAddRole, permission: value })}\n                />\n\n                <Row align={'middle'} justify={'center'} onClick={handleSubmit}>\n                    <button type={'submit'} className={`${className}-btn`}>\n                        {content.btnSubmit}\n                    </button>\n                </Row>\n            </Col>\n\n            <Col xs={24}>\n                <Roles\n                    className={`${className}-list`}\n                    roles={roles}\n                    icon={content.iconDeleteRole}\n                    handleDelete={handleDelete}\n                />\n            </Col>\n        </Row>\n    )\n}\n\nexport default FormRoles\n","import { Avatar, Col, Row } from 'antd'\nimport { randomColorAvatar } from '../../../../../functions/global'\nimport { User } from '../../../../../types/global'\n\ntype IProps = {\n    value: User\n\n    className: string\n}\n\nfunction MemberItem(props: IProps) {\n    const { className, value } = props\n\n    return (\n        <Row align=\"middle\" className={`${className}-item`}>\n            <Col xs={6} className={`${className}-item--avatar`}>\n                <Avatar\n                    shape=\"square\"\n                    size={55}\n                    style={{\n                        backgroundColor: randomColorAvatar(value._id),\n                        borderRadius: 15,\n                    }}\n                >\n                    {value.name?.slice(0, 1)}\n                </Avatar>\n            </Col>\n\n            <Col xs={18} className={`${className}-item--desc`}>\n                <span>{value.name}</span>\n                <span>{value.email}</span>\n            </Col>\n        </Row>\n    )\n}\n\nexport default MemberItem\n","import { Row, Select } from 'antd'\nimport { Role } from '../../../../../types/global'\n\ntype SelectPermissionProps = {\n    className?: string\n    label?: string\n    value: any\n\n    options: Array<Role>\n    onChange: Function\n}\n\nconst { Option } = Select\n\nfunction SelectPermission(props: SelectPermissionProps) {\n    return (\n        <Row align=\"middle\" className={`${props.className}`}>\n            {props.label && <label className={`${props.className}--label`}>{props.label}</label>}\n\n            <Select\n                defaultValue={props.value ? props.value._id : ''}\n                bordered={false}\n                className={`${props.className}--input`}\n                onChange={(val) => props.onChange(val)}\n            >\n                {props.options.map((value: Role) => {\n                    if (!value.default)\n                        return (\n                            <Option key={value._id} value={value._id}>\n                                {value.name}\n                            </Option>\n                        )\n                })}\n            </Select>\n        </Row>\n    )\n}\n\nexport default SelectPermission\n","import { Col, Row } from 'antd'\nimport { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useParams } from 'react-router-dom'\nimport projectsApi from '../../../../api/projectsApi'\nimport { classProject } from '../../../../constants/className'\nimport { DataMembers } from '../../../../types/api'\nimport { Project, Role } from '../../../../types/global'\nimport MemberItem from './Member'\nimport SelectPermission from './SelectPermission'\n\ntype IProps = {}\n\nconst className = classProject.setRoles\n\nfunction FormSetRole(props: IProps) {\n    const params: any = useParams()\n    const project: Project = useSelector((state: any) => state.project)\n\n    const [roles, setRoles] = useState<Array<Role>>([])\n\n    const getRoles = async (id: string) => {\n        try {\n            const response = await projectsApi.getRoles(id)\n            setRoles(response)\n        } catch (error: any) {\n            console.log(error)\n        }\n    }\n\n    const patchRole = async (pid: string, uid: string, data: DataMembers) => {\n        try {\n            const response = await projectsApi.patchMembers(pid, uid, data)\n            console.log(response)\n            getRoles(pid)\n        } catch (error: any) {\n            console.log(error)\n        }\n    }\n\n    const setRoleForMember = (value: any, uid: string) => {\n        patchRole(project._id, uid, { role: value })\n    }\n\n    useEffect(() => {\n        getRoles(params.id)\n    }, [params])\n\n    return (\n        <Row>\n            <Col xs={24} className={`${className}`}>\n                {project &&\n                    project.members.map((value, index) => {\n                        if (project.author !== value.user._id)\n                            return (\n                                <Row\n                                    key={`member-role-${index}`}\n                                    align=\"middle\"\n                                    className={`${className}-item`}\n                                >\n                                    <MemberItem\n                                        value={value.user}\n                                        className={`${className}--member`}\n                                    />\n                                    <SelectPermission\n                                        options={roles}\n                                        className={`${className}--field`}\n                                        label={'Role'}\n                                        value={value.role}\n                                        onChange={(valueSelect: any) =>\n                                            setRoleForMember(valueSelect, value.user._id)\n                                        }\n                                    />\n                                </Row>\n                            )\n                    })}\n            </Col>\n        </Row>\n    )\n}\n\nexport default FormSetRole\n","import moment from 'moment'\n\nimport { DatePicker, Form } from 'antd'\n\nimport './DateField.scss'\n\ntype DateFieldProps = {\n    field: any\n    form: any\n\n    label: string\n    placeholder: string\n    disabled: boolean\n\n    className: string\n}\n\nfunction DateField(props: DateFieldProps) {\n    const { field, form, label, className } = props\n\n    const { name, value } = field\n    const { setFieldValue } = form\n\n    const valueFormat = moment(value)\n\n    const touched = form.touched[field.name]\n    const hasError = form.errors[field.name]\n    const submittedError = hasError\n    const touchedError = hasError && touched\n\n    return (\n        <Form.Item\n            help={submittedError || touchedError ? hasError : false}\n            validateStatus={submittedError || touchedError ? 'error' : ''}\n        >\n            {label && (\n                <label htmlFor={name} className={`${className}-label`}>\n                    {label}\n                </label>\n            )}\n            <DatePicker\n                allowClear={false}\n                id={name}\n                className={`${className}-input-field`}\n                defaultValue={valueFormat || moment()}\n                value={value || moment()}\n                format={`DD/MM/YYYY`}\n                onChange={(val) => setFieldValue(name, val)}\n                bordered={false}\n            />\n        </Form.Item>\n    )\n}\n\nexport default DateField\n","import { Form, Select, Tag } from 'antd'\nimport { randomColorAvatar } from '../../functions/global'\n\ntype SelectFieldProps = {\n    field: any\n    form: any\n\n    type: string\n    label: string\n    options: Array<any>\n    placeholder: string\n    disabled: boolean\n\n    className: string\n}\n\nconst { Option } = Select\n\nfunction SelectField(props: SelectFieldProps) {\n    const { field, form, options, label, disabled, className } = props\n\n    const { name } = field\n\n    const touched = form.touched[field.name]\n    const hasError = form.errors[field.name]\n\n    const submittedError = hasError\n    const touchedError = hasError && touched\n\n    const handleSelectedOptionChange = (selectedOption: any) => {\n        const changeEvent = {\n            target: {\n                name: name,\n                value: selectedOption,\n            },\n        }\n\n        field.onChange(changeEvent)\n    }\n\n    function tagRender(props: any) {\n        const { label, value, closable, onClose } = props\n\n        return (\n            <Tag\n                color={randomColorAvatar(value)}\n                closable={closable}\n                onClose={onClose}\n                style={{ marginRight: 3 }}\n            >\n                {label}\n            </Tag>\n        )\n    }\n\n    return (\n        <Form.Item\n            help={submittedError || touchedError ? hasError : false}\n            validateStatus={submittedError || touchedError ? 'error' : ''}\n        >\n            {label && (\n                <label htmlFor={name} className={`${className}-label`}>\n                    {label}\n                </label>\n            )}\n            <Select\n                mode={'tags'}\n                id={name}\n                {...field}\n                bordered={false}\n                className={`${className}-input-field`}\n                defaultValue={[]}\n                onChange={handleSelectedOptionChange}\n                tagRender={tagRender}\n            >\n                {options.map((value) => {\n                    return (\n                        <Option key={value._id} value={value._id}>\n                            {value.user.name}\n                        </Option>\n                    )\n                })}\n            </Select>\n        </Form.Item>\n    )\n}\n\nexport default SelectField\n","import { Col, Row } from 'antd'\nimport { FastField, Form } from 'formik'\nimport { useSelector } from 'react-redux'\nimport { classProject } from '../../../../constants/className'\nimport { CONTENT_PROJECT } from '../../../../constants/global'\nimport ButtonField from '../../../../custom-fields/BtnSubmit'\nimport DateField from '../../../../custom-fields/DateField'\nimport InputField from '../../../../custom-fields/InputField'\nimport SelectField from '../../../../custom-fields/SelectField'\n\nimport { HandleForm } from '../../../../types/auth'\nimport { Project } from '../../../../types/global'\n\nconst content = CONTENT_PROJECT.formTask\n\nfunction FormTask(props: HandleForm) {\n    const project: Project = useSelector((state: any) => state.project)\n\n    return (\n        <Form onSubmit={props.handleSubmit}>\n            <FastField\n                component={InputField}\n                name={content.fieldsName.name}\n                type={content.fieldsName.type}\n                className={`${classProject.form}--field`}\n                label={content.fieldsName.label}\n            />\n            <Row>\n                <Col xs={12}>\n                    <FastField\n                        component={DateField}\n                        name={content.fieldsExpires.name}\n                        className={`${classProject.form}--field`}\n                        label={content.fieldsExpires.label}\n                    />\n                </Col>\n                <Col xs={12}>\n                    <FastField\n                        component={SelectField}\n                        name={content.fieldsUser.name}\n                        className={`${classProject.form}--field`}\n                        label={content.fieldsUser.label}\n                        options={project.members}\n                    />\n                </Col>\n            </Row>\n\n            <ButtonField\n                content={content.btnSubmit}\n                type=\"submit\"\n                className={`${classProject.form}--btn`}\n            />\n        </Form>\n    )\n}\n\nexport default FormTask\n","import moment from 'moment'\n\nimport { DatePicker, Row } from 'antd'\n\nimport './DateTask.scss'\nimport { useEffect, useState } from 'react'\nimport { Task } from '../../../../../types/global'\n\ntype DateTaskProps = {\n    className?: string\n    name?: string\n    label?: string\n\n    task: Task\n    changeExpires: Function\n}\n\nfunction DateTask(props: DateTaskProps) {\n    const [valueInput, setValueInput] = useState<any>(moment(props.task.expires))\n\n    useEffect(() => {\n        setValueInput(props.task.expires)\n    }, [props.task])\n\n    return (\n        <Row align=\"middle\" className={`${props.className}`}>\n            {props.label && <label className={`${props.className}--label`}>{props.label}</label>}\n            <DatePicker\n                allowClear={false}\n                className={`${props.className}--input`}\n                defaultValue={moment(props.task.expires)}\n                value={moment(valueInput)}\n                format={`DD/MM/YYYY`}\n                onChange={(val) => setValueInput(val)}\n                onBlur={() => props.changeExpires(valueInput, 'expires')}\n            />\n        </Row>\n    )\n}\n\nexport default DateTask\n","import { Col, Input, Row } from 'antd'\nimport { useEffect, useState } from 'react'\nimport { classProject } from '../../../../../constants/className'\nimport { CONTENT_PROJECT } from '../../../../../constants/global'\nimport { Task } from '../../../../../types/global'\n\ntype IProps = {\n    className: string\n    icon: string\n    task: Task\n    changeName: Function\n    handleTask: Function\n}\nconst content = CONTENT_PROJECT.tasks\n\nfunction HeaderTask(props: IProps) {\n    const [valueInput, setValueInput] = useState<string>(props.task.name)\n\n    useEffect(() => {\n        setValueInput(props.task.name)\n    }, [props.task])\n\n    return (\n        <Row justify=\"center\" align=\"middle\" className={`${props.className}`}>\n            <span className={`${props.className}--icon`}>\n                <props.icon />\n            </span>\n            <Input\n                name={props.task.name}\n                className={`${props.className}--input`}\n                defaultValue={props.task.name}\n                value={valueInput}\n                onChange={(e) => setValueInput(e.target.value)}\n                onBlur={() => props.changeName(valueInput, 'name')}\n                bordered={false}\n            />\n            <span\n                className={`${props.className}--icon-delete`}\n                onClick={() => props.handleTask(props.task._id, 'delete-task')}\n            >\n                <content.iconDeleteTask />\n            </span>\n        </Row>\n    )\n}\n\nexport default HeaderTask\n","import { Row, Select, Tag } from 'antd'\nimport { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport projectsApi from '../../../../../api/projectsApi'\nimport { randomColorAvatar } from '../../../../../functions/global'\nimport { Task } from '../../../../../types/global'\n\ntype SelectTaskProps = {\n    className?: string\n    name?: string\n    label?: string\n\n    task: Task\n    changeAssignee: Function\n}\n\nconst { Option } = Select\n\nfunction SelectTask(props: SelectTaskProps) {\n    const params: any = useParams()\n\n    const [options, setOptions] = useState<any>([])\n    const [defaultValues, setDefaultValues] = useState<any>(props.task.assignee)\n\n    const getMembers = async (id: string) => {\n        try {\n            const response = await projectsApi.getMembers(id)\n            setOptions(response)\n        } catch (error: any) {\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        getMembers(params.id)\n        setDefaultValues(props.task.assignee)\n    }, [props.task])\n\n    function tagRender(propsTag: any) {\n        const { label, value, closable, onClose } = propsTag\n\n        return (\n            <Tag\n                color={randomColorAvatar(value)}\n                closable={closable}\n                onClose={() => {\n                    onClose()\n                    props.changeAssignee(value, 'assignee', 'delete')\n                }}\n                style={{ marginRight: 3 }}\n            >\n                {label}\n            </Tag>\n        )\n    }\n\n    return (\n        <Row align=\"middle\" className={`${props.className}`}>\n            {props.label && <label className={`${props.className}--label`}>{props.label}</label>}\n            <Select\n                mode={'tags'}\n                bordered={false}\n                className={`${props.className}--input`}\n                value={defaultValues}\n                onChange={(value) => {\n                    setDefaultValues(value)\n                    props.changeAssignee(value[value.length - 1], 'assignee', 'add')\n                }}\n                tagRender={tagRender}\n            >\n                {options.map((value: any) => {\n                    return (\n                        <Option key={value._id} value={value._id}>\n                            {value.user.name}\n                        </Option>\n                    )\n                })}\n            </Select>\n        </Row>\n    )\n}\n\nexport default SelectTask\n","import { FastField, Form } from 'formik'\nimport { classProject } from '../../../../constants/className'\nimport { CONTENT_PROJECT } from '../../../../constants/global'\nimport ButtonField from '../../../../custom-fields/BtnSubmit'\nimport InputField from '../../../../custom-fields/InputField'\n\nimport { HandleForm } from '../../../../types/auth'\n\nconst content = CONTENT_PROJECT.formSubTask\n\nfunction FormSubTask(props: HandleForm) {\n    return (\n        <Form onSubmit={props.handleSubmit}>\n            <FastField\n                component={InputField}\n                name={content.fieldsName.name}\n                type={content.fieldsName.type}\n                className={`${classProject.form}--field`}\n                label={content.fieldsName.label}\n            />\n\n            <ButtonField\n                content={content.btnSubmit}\n                type=\"submit\"\n                className={`${classProject.form}--btn`}\n            />\n        </Form>\n    )\n}\n\nexport default FormSubTask\n","import { Col, Row } from 'antd'\nimport { Formik } from 'formik'\nimport { useEffect, useState } from 'react'\nimport ModalCustom from '../../../../../components/ModalCustom'\nimport { CONTENT_PROJECT } from '../../../../../constants/global'\nimport { initialValuesFormProjectAddSubTask } from '../../../../../constants/initialValues'\nimport { validateFormProjectAddTask } from '../../../../../constants/validate'\n\nimport { Task } from '../../../../../types/global'\nimport FormSubTask from '../../FormSubTask'\n\ntype SubTaskProps = {\n    className?: string\n    icon: any\n    task: Task\n    handleSubmit: Function\n    handleChangeSubtask: Function\n}\n\nconst content = CONTENT_PROJECT.tasks.subtask\n\nfunction SubTask(props: SubTaskProps) {\n    const [contentModal, setContentModal] = useState<any>(<></>)\n    const [visible, setVisible] = useState<boolean>(false)\n\n    useEffect(() => {\n        const temp = (\n            <Formik\n                initialValues={initialValuesFormProjectAddSubTask}\n                validationSchema={validateFormProjectAddTask}\n                onSubmit={(valueForm) => {\n                    setVisible(false)\n                    props.handleSubmit(valueForm)\n                }}\n                render={FormSubTask}\n            />\n        )\n        setContentModal({ title: content.title, temp: temp })\n    }, [props.task, visible])\n\n    return (\n        <Row align=\"middle\" className={`${props.className}`}>\n            <Col xs={24}>\n                <Row>\n                    <button className={`${props.className}--btn`} onClick={() => setVisible(true)}>\n                        {content.btnAdd}\n                    </button>\n                </Row>\n                <span className={`${props.className}--title`}>{content.title}</span>\n                <Row>\n                    <Col xs={24} className={`${props.className}--list`}>\n                        {props.task.subtask_order?.map((value: any, index) => {\n                            return (\n                                <Row\n                                    key={`subtask-${index}`}\n                                    align=\"middle\"\n                                    justify=\"space-between\"\n                                    className={`${props.className}--item`}\n                                >\n                                    <div>\n                                        <props.icon /> <span>{value.name}</span>\n                                    </div>\n                                    {!value.complete && (\n                                        <div className={`${props.className}--icon`}>\n                                            <content.iconCheck\n                                                onClick={() =>\n                                                    props.handleChangeSubtask(value, 'complete')\n                                                }\n                                            />\n                                            <content.iconCancel\n                                                onClick={() =>\n                                                    props.handleChangeSubtask(value, 'delete')\n                                                }\n                                            />\n                                        </div>\n                                    )}\n                                </Row>\n                            )\n                        })}\n                    </Col>\n                </Row>\n            </Col>\n\n            <ModalCustom\n                loading={false}\n                contentModal={contentModal.temp}\n                visible={visible}\n                closeModal={(value: boolean) => {\n                    setVisible(value)\n                }}\n                title={contentModal.title}\n            />\n        </Row>\n    )\n}\n\nexport default SubTask\n","import { Input, Row } from 'antd'\nimport { useEffect, useState } from 'react'\nimport { Task } from '../../../../../types/global'\n\ntype IProps = {\n    className?: string\n    placeholder?: string\n    name?: string\n    value?: any\n    label?: string\n\n    task: Task\n    changeDescription: Function\n}\nconst { TextArea } = Input\n\nfunction TextAreaTask(props: IProps) {\n    const [valueInput, setValueInput] = useState<string>(props.task.name)\n\n    useEffect(() => {\n        setValueInput(props.task.name)\n    }, [props.task])\n\n    return (\n        <Row justify=\"center\" className={`${props.className}`}>\n            {props.label && (\n                <label htmlFor={props.name} className={`${props.className}--label`}>\n                    {props.label}\n                </label>\n            )}\n            <TextArea\n                rows={4}\n                name={props.task.name}\n                className={`${props.className}--area`}\n                defaultValue={props.task.name}\n                value={valueInput}\n                onChange={(e) => setValueInput(e.target.value)}\n                onBlur={() => props.changeDescription(valueInput, 'description')}\n                bordered={false}\n            />\n        </Row>\n    )\n}\n\nexport default TextAreaTask\n","import { Col, Row } from 'antd'\nimport moment from 'moment'\nimport { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport projectsApi from '../../../../api/projectsApi'\nimport { classProject } from '../../../../constants/className'\nimport { initialValuesFormProjectAddSubTask } from '../../../../constants/initialValues'\nimport { openNotificationWithIcon } from '../../../../functions/global'\nimport { Task } from '../../../../types/global'\nimport DateTask from './DateTask'\nimport HeaderTask from './Header'\nimport SelectTask from './SelectTask'\nimport SubTask from './SubTask'\nimport TextAreaTask from './TextAreaTask'\n\ntype IProps = {\n    task: Task\n    icon: string\n\n    changeTask: Function\n    memberProject: Array<any>\n    setVisibleDrawer: Function\n}\n\nconst className = classProject.task\n\nfunction TaskDetail(props: IProps) {\n    const params: any = useParams()\n    const [task, setTask] = useState<Task>(props.task)\n\n    const getTask = async (pid: string, id: string) => {\n        try {\n            const response: Task = await projectsApi.getTasksDetail(pid, id)\n            setTask(response)\n        } catch (error: any) {\n            console.log(error)\n        }\n    }\n\n    const patchTask = async (pid: string, id: string, data: Task) => {\n        try {\n            const response: Task = await projectsApi.patchTasks(pid, id, data)\n            if (response) {\n                props.changeTask()\n                getTask(pid, id)\n            }\n        } catch (error: any) {\n            console.log(error)\n        }\n    }\n\n    const deleteTask = async (pid: string, id: string) => {\n        try {\n            const response = await projectsApi.deleteTasks(pid, id)\n            props.changeTask()\n            props.setVisibleDrawer()\n        } catch (error: any) {\n            console.log(error)\n        }\n    }\n\n    const patchSubTask = async (pid: string, id: string, status: string) => {\n        try {\n            if (status === 'complete') {\n                const response: Task = await projectsApi.patchTasksComplete(pid, id)\n                openNotificationWithIcon('success', 'Task complete!', '')\n            } else {\n                const response = await projectsApi.deleteTasks(pid, id)\n                openNotificationWithIcon('success', 'Delete Task successfully!', '')\n            }\n            props.changeTask()\n            getTask(pid, task._id || '')\n        } catch (error: any) {\n            console.log(error)\n        }\n    }\n\n    const postSubTask = async (pid: string, id: string, data: Task) => {\n        try {\n            const response: Task = await projectsApi.postSubtasks(pid, id, data)\n\n            if (response) {\n                props.changeTask()\n                getTask(pid, id)\n                openNotificationWithIcon('success', 'Create Subtask successfully!', '')\n            }\n        } catch (error: any) {\n            console.log(error)\n        }\n    }\n\n    const postAssignee = async (pid: string, id: string, data: { member: string }) => {\n        try {\n            const response: Task = await projectsApi.postAssigneeTasks(pid, id, data)\n            if (response) {\n                props.changeTask()\n                getTask(pid, id)\n            }\n        } catch (error: any) {\n            console.log(error)\n        }\n    }\n\n    const deleteAssignee = async (pid: string, id: string, uid: string) => {\n        try {\n            const response: Task = await projectsApi.deleteAssigneeTasks(pid, id, uid)\n            setTask(response)\n        } catch (error: any) {\n            console.log(error)\n        }\n    }\n    const change = (value: any, field: any, status?: 'add' | 'delete') => {\n        const id = props.task._id || ''\n\n        if (value) {\n            let data: any = {}\n            switch (field) {\n                case 'name':\n                    data.name = value\n                    patchTask(params.id, id, data)\n\n                    break\n                case 'assignee':\n                    if (status === 'delete') {\n                        deleteAssignee(params.id, id, value)\n                    } else {\n                        postAssignee(params.id, id, { member: value })\n                    }\n\n                    break\n                case 'expires':\n                    data.expires = Number(moment(value).utc().format('x'))\n                    patchTask(params.id, id, data)\n                    break\n                case 'delete-task':\n                    deleteTask(params.id, value)\n                    break\n                default:\n                    break\n            }\n        }\n    }\n\n    const handleSubTask = (value: Task) => {\n        const id = props.task._id || ''\n        postSubTask(params.id, id, value)\n    }\n\n    const handleChangeSubtask = (value: any, status: string) => {\n        patchSubTask(params.id, value._id, status)\n    }\n\n    useEffect(() => {\n        setTask(props.task)\n    }, [props.task])\n\n    return (\n        <Row>\n            <Col xs={24}>\n                <HeaderTask\n                    className={`${className}-header`}\n                    icon={props.icon}\n                    task={task}\n                    changeName={change}\n                    handleTask={change}\n                />\n                <SelectTask\n                    className={`${className}-field`}\n                    task={task}\n                    label={'Assignee'}\n                    changeAssignee={change}\n                />\n                <DateTask\n                    className={`${className}-field`}\n                    task={task}\n                    label={'Due date'}\n                    name={'expires'}\n                    changeExpires={change}\n                />\n\n                <TextAreaTask\n                    className={`${className}-field`}\n                    task={task}\n                    label={'Description'}\n                    name={'expires'}\n                    changeDescription={(value: any) => console.log(value)}\n                />\n\n                <SubTask\n                    className={`${className}-subtask`}\n                    task={task}\n                    icon={props.icon}\n                    handleSubmit={handleSubTask}\n                    handleChangeSubtask={handleChangeSubtask}\n                />\n            </Col>\n        </Row>\n    )\n}\n\nexport default TaskDetail\n","import { Col, Row } from 'antd'\nimport moment from 'moment'\nimport { CONTENT_PROJECT } from '../../../../constants/global'\nimport { Task } from '../../../../types/global'\n\ntype IProps = {\n    className: string\n    title: string\n    actionDropdown: Function\n    filter?: string\n    icon: any\n\n    tasks: Array<Task>\n    handleTask: Function\n}\n\nconst content = CONTENT_PROJECT.tasks\n\nfunction Tasks(props: IProps) {\n    return (\n        <div className={`${props.className}`}>\n            <Row justify=\"center\">\n                <Col xs={24}>\n                    <Row className={`${props.className}--title`}>\n                        <span>{props.title}</span>\n                    </Row>\n                    <Row className={`${props.className}--tasks`}>\n                        <Col xs={24}>\n                            {props.tasks.length > 0 &&\n                                props.tasks.map((value, index) => {\n                                    if (value.status === props.filter)\n                                        return (\n                                            <Row\n                                                key={`task-${index}`}\n                                                className={`${props.className}--task`}\n                                                onClick={() => props.handleTask(value, props.icon)}\n                                            >\n                                                <Col xs={24}>\n                                                    <Row justify=\"space-between\" align=\"middle\">\n                                                        <Col\n                                                            xs={20}\n                                                            className={`${props.className}--task-name`}\n                                                        >\n                                                            <props.icon /> <span>{value.name}</span>\n                                                        </Col>\n                                                        <span\n                                                            className={`${props.className}--task-icon`}\n                                                        >\n                                                            <content.iconMenuTask />\n                                                        </span>\n                                                    </Row>\n                                                    <Row justify=\"space-between\">\n                                                        <span\n                                                            className={`${props.className}--task-time`}\n                                                        >\n                                                            <content.iconDeadline />{' '}\n                                                            {moment(value.expires).format(\n                                                                'DD/MM/YYYY'\n                                                            )}\n                                                        </span>\n                                                    </Row>\n                                                </Col>\n                                            </Row>\n                                        )\n                                })}\n\n                            <Row className={`${props.className}--btn`}>\n                                <Col xs={24}>\n                                    <Row\n                                        align=\"middle\"\n                                        onClick={() => props.actionDropdown('add-task')}\n                                    >\n                                        <span className={`${props.className}--btn-icon`}>\n                                            <content.iconBtnAdd />\n                                        </span>\n                                        <span className={`${props.className}--btn-text`}>\n                                            {content.textBtnAdd}\n                                        </span>\n                                    </Row>\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default Tasks\n","import { Col, Row } from 'antd';\nimport { Formik } from 'formik';\nimport moment from 'moment';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport projectsApi from '../../api/projectsApi';\nimport { add } from '../../app/projectSlice';\nimport { patchOneProject } from '../../app/projectsSlice';\nimport DrawerCustom from '../../components/DrawerCustom';\nimport Header from '../../components/Header';\nimport ModalCustom from '../../components/ModalCustom';\nimport { classLayout, classProject } from '../../constants/className';\nimport { CONTENT_PROJECT } from '../../constants/global';\nimport { initialValuesFormProjectAddTask } from '../../constants/initialValues';\nimport { validateFormProjectAddTask } from '../../constants/validate';\nimport { openNotificationWithIcon } from '../../functions/global';\nimport { Project, Task } from '../../types/global';\nimport FormMember from './components/FormMember';\nimport FormRoles from './components/FormRoles';\nimport FormSetRole from './components/FormSetRole';\nimport FormTask from './components/FormTask';\nimport TaskDetail from './components/TaskDetail';\nimport Tasks from './components/Tasks';\n\nimport './Project.scss';\n\ntype IProps = {\n    className: string;\n};\n\nconst content = CONTENT_PROJECT;\nconst className = classProject.project;\n\nfunction ProjectPage(props: IProps) {\n    const params: any = useParams();\n    const dispatch = useDispatch();\n\n    const [visible, setVisible] = useState<boolean>(false);\n    const [visibleDrawer, setVisibleDrawer] = useState<boolean>(false);\n    const [contentModal, setContentModal] = useState<any>(<></>);\n    const [contentDrawer, setContentDrawer] = useState<any>(<></>);\n\n    const projects: Array<Project> = useSelector((state: any) => state.projects);\n    const project: Project = useSelector((state: any) => state.project);\n\n    const [tasks, setTasks] = useState<Array<Task>>([]);\n\n    const getProject = async (pid: string) => {\n        try {\n            const response = await projectsApi.getProjectsDetail(pid);\n            dispatch(add(response));\n            getTasks(pid);\n        } catch (error: any) {\n            console.log(error);\n        }\n    };\n\n    const patchProject = async (pid: string, value: string) => {\n        try {\n            const response = await projectsApi.patchProjects(pid, { name: value });\n            dispatch(add(response));\n            dispatch(patchOneProject({ _pid: pid, value: value }));\n        } catch (error: any) {\n            console.log(error);\n        }\n    };\n\n    const getTasks = async (pid: string) => {\n        try {\n            const response: Array<Task> = await projectsApi.getTasks(pid);\n            setTasks(response);\n        } catch (error: any) {\n            console.log(error);\n        }\n    };\n\n    const postTask = async (pid: string, data: Task) => {\n        try {\n            const formData = {\n                name: data.name,\n            };\n            const response_post: Task = await projectsApi.postTasks(pid, formData);\n            const idTask = response_post._id || '';\n\n            if (data.assignee && response_post) {\n                for (const value of data.assignee) {\n                    const response_assignee: Task = await projectsApi.postAssigneeTasks(\n                        pid,\n                        idTask,\n                        { member: value }\n                    );\n                }\n\n                delete data.assignee;\n            }\n\n            if (data && response_post) {\n                data.expires = Number(moment(data.expires).utc().format('x'));\n\n                const response_patch: Task = await projectsApi.patchTasks(pid, idTask, data);\n\n                if (response_patch) {\n                    setVisible(false);\n                    getProject(pid);\n                    openNotificationWithIcon('success', 'Create Task successfully!', '');\n                }\n            }\n        } catch (error: any) {\n            console.log(error);\n        }\n    };\n\n    const handleSubmit = (value: any, action: string, filter?: string) => {\n        switch (action) {\n            case 'add-task':\n                postTask(project._id, { ...value, status: filter });\n                break;\n\n            default:\n                break;\n        }\n    };\n\n    const handleActionDropdown = (value: any, filter?: string) => {\n        let temp = <></>;\n        let title = '';\n\n        setVisible(true);\n\n        switch (value) {\n            case 'add-task':\n                temp = (\n                    <Formik\n                        initialValues={initialValuesFormProjectAddTask}\n                        validationSchema={validateFormProjectAddTask}\n                        onSubmit={(valueForm) => handleSubmit(valueForm, value, filter)}\n                        render={FormTask}\n                    />\n                );\n                title = 'Add Task';\n                break;\n            case 'add-member':\n                temp = <FormMember />;\n                title = 'Members';\n\n                break;\n            case 'add-roles':\n                temp = <FormRoles />;\n                title = 'Roles';\n\n                break;\n            case 'set-role':\n                temp = <FormSetRole />;\n                title = 'Set Role for Members';\n\n                break;\n            default:\n                break;\n        }\n\n        setContentModal({ temp: temp, title: title });\n    };\n\n    const handleTask = (value: Task, icon: string) => {\n        setVisibleDrawer(true);\n        setContentDrawer(\n            <TaskDetail\n                task={value}\n                icon={icon}\n                changeTask={() => {\n                    getTasks(params.id);\n                }}\n                memberProject={project.members}\n                setVisibleDrawer={() => setVisibleDrawer(false)}\n            />\n        );\n    };\n\n    useEffect(() => {\n        if (projects && projects.length > 0) {\n            projects.forEach((value) => {\n                if (value._id === params.id) {\n                    getTasks(value._id);\n                    dispatch(add(value));\n                }\n            });\n        } else {\n            getProject(params.id);\n        }\n    }, [params]);\n\n    useEffect(() => {\n        if (!visible) setContentModal({ temp: <></>, title: '' });\n    }, [visible]);\n\n    return (\n        <Row className={`${props.className} ${className}`}>\n            <Col xs={24}>\n                <Header\n                    className={classLayout.header}\n                    dropdown={project.name}\n                    actionDropdown={handleActionDropdown}\n                    changeNameProject={(value: any) => patchProject(project._id, value)}\n                />\n                <div className={`${className}__list`}>\n                    <div className={`${className}__list--scroll`}>\n                        {content.tasks.filter.map((value, index) => {\n                            return (\n                                <Tasks\n                                    key={`tasks-${index}`}\n                                    actionDropdown={(valueTask: any) =>\n                                        handleActionDropdown(valueTask, value.value)\n                                    }\n                                    className={`${className}__list-tasks`}\n                                    title={value.title}\n                                    tasks={tasks}\n                                    filter={value.value}\n                                    icon={value.icon}\n                                    handleTask={handleTask}\n                                />\n                            );\n                        })}\n                    </div>\n                </div>\n                <ModalCustom\n                    loading={false}\n                    contentModal={contentModal.temp}\n                    visible={visible}\n                    closeModal={(value: boolean) => {\n                        setVisible(value);\n                    }}\n                    title={contentModal.title}\n                />\n\n                <DrawerCustom\n                    visible={visibleDrawer}\n                    closeModal={() => setVisibleDrawer(false)}\n                    contentDrawer={contentDrawer}\n                />\n            </Col>\n        </Row>\n    );\n}\n\nexport default ProjectPage;\n"],"names":["props","name","user","align","className","overlay","menuUser","placement","arrow","style","backgroundColor","randomColorAvatar","_id","slice","indexOf","content","CONTENT_COMPONENT","classComponent","useSelector","state","dispatch","useDispatch","useState","dropdown","title","setTitle","menuDropdown","onClick","value","actionDropdown","key","map","icon","text","handleUser","getUser","userApi","response","setUser","console","log","setSignOut","isLogin","useEffect","undefined","justify","DownOutlined","bordered","onChange","e","target","onBlur","changeNameProject","navigate","length","index","to","path","isActive","Search","onSearch","User","visible","width","onClose","closeModal","getContainer","closable","contentDrawer","CONTENT_PROJECT","type","handleMember","projectAuthor","xs","shape","size","borderRadius","email","btnSubmit","btnDelete","classProject","project","userSearch","setUserSearch","findUser","mail","openNotificationWithIcon","arr","filter","members","item","push","postMember","pid","data","projectsApi","addMember","addMemberToProject","_pid","deleteMemberAPI","uid","deleteMember","deleteMemberToProject","Member","author","label","htmlFor","placeholder","roles","default","permission","color","marginRight","marginBottom","fontSize","handleDelete","Option","Select","mode","val","tagRender","options","params","useParams","dataAddRole","setDataAddRole","setRoles","getRoles","id","postRoles","deleteRoles","optionsPermission","iconDeleteRole","defaultValue","patchRole","role","valueSelect","setRoleForMember","field","form","setFieldValue","valueFormat","moment","touched","hasError","errors","submittedError","touchedError","help","validateStatus","allowClear","format","disabled","selectedOption","changeEvent","onSubmit","handleSubmit","component","InputField","fieldsName","DateField","fieldsExpires","SelectField","fieldsUser","task","expires","valueInput","setValueInput","changeExpires","changeName","handleTask","iconDeleteTask","setOptions","assignee","defaultValues","setDefaultValues","getMembers","changeAssignee","propsTag","contentModal","setContentModal","setVisible","temp","initialValues","initialValuesFormProjectAddSubTask","validationSchema","validateFormProjectAddTask","valueForm","render","FormSubTask","btnAdd","subtask_order","complete","iconCheck","handleChangeSubtask","iconCancel","ModalCustom","loading","TextArea","Input","rows","changeDescription","setTask","getTask","patchTask","changeTask","deleteTask","setVisibleDrawer","patchSubTask","status","postSubTask","postAssignee","deleteAssignee","change","member","Number","utc","tasks","iconMenuTask","iconDeadline","iconBtnAdd","textBtnAdd","visibleDrawer","setContentDrawer","projects","setTasks","getProject","add","getTasks","patchProject","patchOneProject","postTask","formData","response_post","idTask","handleActionDropdown","initialValuesFormProjectAddTask","action","FormTask","memberProject","forEach","Header","classLayout","valueTask"],"sourceRoot":""}